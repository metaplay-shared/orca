// <auto-generated />
using System;
using Game.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250902082857_MetaplayRelease34")]
    partial class MetaplayRelease34
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Game.Server.League.PersistedDivision", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("Divisions", (string)null);
                });

            modelBuilder.Entity("Game.Server.Player.PersistedPlayer", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LogicVersion")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Metaplay.Cloud.Persistence.DatabaseMetaInfo", b =>
                {
                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MasterVersion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumShards")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("DateTime");

                    b.HasKey("Version");

                    b.ToTable("MetaInfo", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.AdminApi.AuditLog.PersistedAuditLogEvent", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<byte[]>("CompressedPayload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("CompressionAlgorithm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SourceCountryIsoCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("SourceIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("EventId");

                    b.HasIndex("Source");

                    b.HasIndex("Target");

                    b.ToTable("AuditLogEvents", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.Authentication.PersistedAuthenticationEntry", b =>
                {
                    b.Property<string>("AuthKey")
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<string>("HashedAuthToken")
                        .HasColumnType("varchar(160)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.HasKey("AuthKey");

                    b.ToTable("AuthEntries", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.DatabaseScan.PersistedDatabaseScanCoordinator", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("DatabaseScanCoordinators", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.DatabaseScan.PersistedDatabaseScanWorker", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("DatabaseScanWorkers", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.Guild.PersistedGuildBase", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("CachedDisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("Guilds", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.Guild.PersistedGuildEventLogSegment", b =>
                {
                    b.Property<string>("GlobalId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FirstEntryTimestamp")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("LastEntryTimestamp")
                        .HasColumnType("DateTime");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("SegmentSequentialId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GlobalId");

                    b.HasIndex("OwnerId");

                    b.ToTable("GuildEventLogSegments", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.Guild.PersistedGuildInviteCode", b =>
                {
                    b.Property<string>("InviteCode")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("GuildId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("InviteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InviteCode");

                    b.ToTable("GuildInviteCodes", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.Guild.PersistedGuildSearch", b =>
                {
                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("NamePart")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue(64u);

                    b.HasIndex("EntityId");

                    b.HasIndex("NamePart", "EntityId");

                    b.HasIndex("Priority", "NamePart", "EntityId");

                    b.ToTable("GuildNameSearches", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.GuildDiscovery.PersistedGuildDiscoveryPoolPage", b =>
                {
                    b.Property<string>("PageId")
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("PageId");

                    b.ToTable("GuildDiscoveryPoolPages", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.InAppPurchase.PersistedInAppPurchase", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<byte[]>("Event")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<bool>("IsValidReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.HasKey("TransactionId");

                    b.ToTable("InAppPurchases", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.InAppPurchase.PersistedInAppPurchaseSubscription", b =>
                {
                    b.Property<string>("PlayerAndOriginalTransactionId")
                        .HasMaxLength(530)
                        .HasColumnType("varchar(530)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("OriginalTransactionId")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<byte[]>("SubscriptionInfo")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("PlayerAndOriginalTransactionId");

                    b.HasIndex("OriginalTransactionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("InAppPurchaseSubscriptions", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.InAppPurchase.PersistedServerDrivenInAppPurchase", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PurchasePlatform")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PurchasePlatformUserId")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.HasKey("TransactionId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PurchasePlatform", "PurchasePlatformUserId", "ProductId");

                    b.ToTable("ServerDrivenInAppPurchases", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.KeyManager.PersistedKeyManager", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("KeyManagers", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.League.PersistedLeagueManager", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("LeagueManagers", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.League.PersistedParticipantDivisionAssociation", b =>
                {
                    b.Property<string>("LeagueId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ParticipantId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("DivisionId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("LeagueStateRevision")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("LeagueId", "ParticipantId");

                    b.HasIndex("DivisionId");

                    b.HasIndex("LeagueStateRevision");

                    b.HasIndex("ParticipantId");

                    b.ToTable("LeagueParticipantDivisionAssociations", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.LiveOpsTimeline.PersistedLiveOpsTimelineManager", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("LiveOpsTimelineManagers", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.Matchmaking.PersistedMatchmakerState", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("Matchmakers", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PersistedGlobalState", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("GlobalStates", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PersistedLocalizations", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("ArchiveBuiltAt")
                        .HasColumnType("DateTime");

                    b.Property<byte[]>("ArchiveBytes")
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("FailureInfo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TaskId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime?>("UnpublishedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("VersionHash")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Localizations", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PersistedPlayerEventLogSegment", b =>
                {
                    b.Property<string>("GlobalId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FirstEntryTimestamp")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("LastEntryTimestamp")
                        .HasColumnType("DateTime");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("SegmentSequentialId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GlobalId");

                    b.HasIndex("OwnerId");

                    b.ToTable("PlayerEventLogSegments", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PersistedPlayerIncident", b =>
                {
                    b.Property<string>("IncidentId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Compression")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.HasKey("IncidentId");

                    b.HasIndex("PersistedAt");

                    b.HasIndex("PlayerId");

                    b.HasIndex("Fingerprint", "PersistedAt");

                    b.ToTable("PlayerIncidents", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PersistedPlayerSearch", b =>
                {
                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("NamePart")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<uint>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue(64u);

                    b.HasIndex("EntityId");

                    b.HasIndex("NamePart", "EntityId");

                    b.HasIndex("Priority", "NamePart", "EntityId");

                    b.ToTable("PlayerNameSearches", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PersistedSegmentEstimateState", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("SegmentEstimates", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PersistedStaticGameConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("ArchiveBuiltAt")
                        .HasColumnType("DateTime");

                    b.Property<byte[]>("ArchiveBytes")
                        .HasColumnType("longblob");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<string>("FailureInfo")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("DateTime");

                    b.Property<byte[]>("MetaDataBytes")
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("TaskId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime?>("UnpublishedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("VersionHash")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("StaticGameConfigs", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PersistedStatsCollector", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("StatsCollectors", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PlayerDeletion.PlayerDeletionRecords+PersistedPlayerDeletionRecord", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("DeletionSource")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("ScheduledDeletionAt")
                        .HasColumnType("DateTime");

                    b.HasKey("PlayerId");

                    b.ToTable("PlayerDeletionRecords", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PublicWebApi.PersistedWebLoginAuthorizationFlow", b =>
                {
                    b.Property<string>("AuthorizationCode")
                        .HasColumnType("char(32)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CodeExchangeExpiresAt")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("FlowExpiresAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("LoginMethod")
                        .HasColumnType("TEXT");

                    b.Property<int>("Phase")
                        .HasColumnType("int");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)");

                    b.Property<byte[]>("S256CodeChallenge")
                        .HasColumnType("binary(32)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("State")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)");

                    b.Property<byte[]>("UserInfo")
                        .HasColumnType("longblob");

                    b.HasKey("AuthorizationCode");

                    b.HasIndex("FlowExpiresAt");

                    b.ToTable("WebLoginAuthorizations", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.PublicWebApi.PersistedWebLoginClientSession", b =>
                {
                    b.Property<string>("ClientSessionId")
                        .HasColumnType("char(32)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("LoginMethod")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("RefreshTokenNonce")
                        .IsRequired()
                        .HasColumnType("char(32)");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<byte[]>("UserInfo")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("ClientSessionId");

                    b.HasIndex("ExpiresAt");

                    b.ToTable("WebLoginClientSessions", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.Services.PersistedSteamworksPoller", b =>
                {
                    b.Property<string>("EntityId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("PersistedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("INTEGER");

                    b.HasKey("EntityId");

                    b.ToTable("SteamworksPollers", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.StatisticsEvents.PersistedStatisticsEvent", b =>
                {
                    b.Property<string>("UniqueKey")
                        .HasColumnType("varchar(128)");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("DateTime(3)");

                    b.HasKey("UniqueKey");

                    b.HasIndex("Timestamp");

                    b.ToTable("StatisticsEvents", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.StatisticsEvents.PersistedStatisticsStoragePage", b =>
                {
                    b.Property<string>("UniqueKey")
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("DateTime");

                    b.Property<byte[]>("Payload")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ResolutionName")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("DateTime");

                    b.HasKey("UniqueKey");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EndTime");

                    b.HasIndex("StartTime");

                    b.ToTable("StatisticsPages", (string)null);
                });

            modelBuilder.Entity("Metaplay.Server.WebApi.PersistedDataProtectorKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("DateTime");

                    b.Property<byte[]>("KeyBytes")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.ToTable("DataProtectorKeys", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
