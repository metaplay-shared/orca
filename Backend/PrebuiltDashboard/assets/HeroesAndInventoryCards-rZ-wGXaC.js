import{d as R,E as h,a3 as P,c as N,r as G,e as w,o as s,w as o,j as m,f as p,x as F,Q as x,q as r,t as u,a as i,m as $,U as I,k as _,F as C,b as H,_ as O,v as Q,ah as J}from"./index-DAyiym1a.js";import{M as L,a as B,b as K,c as z}from"./metaListUtils-B-xQ0HnD.js";import{g as U}from"./localization-DDIHoN6I.js";import{a as M}from"./players-CkgXyjra.js";const W={key:0},X={key:0},Y={key:0,class:"tw-mr-1"},Z={key:0,class:"tw-mr-1"},ee={key:1},te=R({__name:"HeroesCard",props:{playerId:{}},setup(T){const g=T,{data:l}=h(()=>P(["Heroes","HeroTasks"])),{data:v,refresh:D}=h(()=>M(g.playerId)),{data:b}=h(()=>U("$active"));function k(t){return b.value?.locs.en.translations["Hero."+t]||t}function c(t){return b.value?.locs.en.translations["Chain."+t]||t}const y=["info"],f=[new K("unlocked",[new z("Locked",t=>t.level===0),new z("Unlocked",t=>t.level>0)])],V=[L.asUnsorted(),new L("Level","level",B.Ascending),new L("Level","level",B.Descending)],j=N(()=>{if(l.value&&v.value){const t=l.value.gameConfig.Heroes;return Object.keys(t).map(e=>e in v.value.model.heroes.heroes?{info:e,level:v.value.model.heroes.heroes[e].level.level,task:q(v.value.model.heroes.heroes[e].currentTask?.info),taskResources:E(v.value.model.heroes.heroes[e].currentTask?.info),taskRewards:A(v.value.model.heroes.heroes[e].currentTask?.info),taskState:v.value.model.heroes.heroes[e].currentTask?.state,image:`/Heroes/${e}.png`}:{info:e,level:0,task:0,taskState:"Locked",image:`/Heroes/${e}.png`})}else return});function q(t){if(l.value?.gameConfig.HeroTasks?.[t])return l.value.gameConfig.HeroTasks[t]}function A(t){if(t&&l.value?.gameConfig.HeroTasks?.[t]){const e=l.value.gameConfig.HeroTasks[t].rewards;return Object.keys(e).map(n=>({info:n,type:e[n].type,level:e[n].level,count:e[n].count,image:`/Board/Chains/${e[n].type}${e[n].level}.png`}))}else return}function E(t){if(t&&l.value?.gameConfig.HeroTasks?.[t]){const e=l.value.gameConfig.HeroTasks[t].resources;return Object.keys(e).map(n=>({info:n,type:e[n].type,amount:e[n].amount,image:`/Board/Chains/${e[n].type}1.png`}))}else return}return(t,e)=>{const n=G("meta-list-card");return s(),w(n,{class:"tw-rounded-lg tw-border tw-border-neutral-200",title:"Heroes",itemList:j.value,searchFields:y,filterSets:f,sortOptions:V,pageSize:20,alternativeTitleStyle:"","data-testid":"player-heroes-card"},{"item-card":o(({item:a})=>[m(p(F),{class:x({"tw-saturate-0":a?.taskState==="Locked"}),avatarUrl:a.image},{"top-right":o(()=>[a.level>0?(s(),w(p(O),{key:0,variant:"primary"},{default:o(()=>[_("Level "+u(a.level),1)],void 0,!0),_:2},1024)):(s(),w(p(O),{key:1},{default:o(()=>[_(u(a.taskState),1)],void 0,!0),_:2},1024))]),"bottom-left":o(()=>[a.taskState!=="Locked"?(s(),i("div",W,[a.task!==null&&a.task!==void 0?(s(),i("div",X,[r("table",null,[r("tbody",null,[r("tr",null,[e[0]||(e[0]=r("td",{class:"tw-align-top"},"Current Task:",-1)),r("td",null,[m(p(I),{content:`Item Type: ${a.task?.itemType}
Task ID: ${a.task?.id}`},{default:o(()=>[_("Task "+u(a.task?.id)+": "+u(c(a.task?.itemType)),1)],void 0,!0),_:2},1032,["content"])])]),r("tr",null,[e[1]||(e[1]=r("td",{class:"tw-align-top"},"Requirements:",-1)),r("td",null,[(s(!0),i(C,null,H(a.taskResources,(d,S)=>(s(),i("span",null,[m(p(I),{content:`Requirement Type: ${d.type}
Count: ${d.amount}`},{default:o(()=>[_(u(c(d.type))+" x"+u(d.amount),1)],void 0,!0),_:2},1032,["content"]),S<a.taskResources.length-1?(s(),i("span",Y,",")):$("",!0)]))),256))])]),r("tr",null,[e[2]||(e[2]=r("td",{class:"tw-align-top"},"Rewards:",-1)),r("td",null,[(s(!0),i(C,null,H(a.taskRewards,(d,S)=>(s(),i("span",null,[m(p(I),{content:`Reward Type: ${d.type}
Count: ${d.count}`},{default:o(()=>[_(u(c(d.type))+" x"+u(d.count),1)],void 0,!0),_:2},1032,["content"]),S<a.taskRewards.length-1?(s(),i("span",Z,",")):$("",!0)]))),256))])])])])])):(s(),i("div",ee,e[3]||(e[3]=[r("div",{class:"tw-italic tw-text-neutral-400"},"No task available",-1)])))])):$("",!0)]),default:o(()=>[r("div",{class:x({"tw-text-neutral-500":a.level===0})},u(k(a.info)),3)],void 0,!0),_:2},1032,["class","avatarUrl"])]),_:1},8,["itemList"])}}}),ae=R({__name:"InventoryCard",props:{playerId:{}},setup(T){const g=T,{data:l,refresh:v}=h(()=>M(g.playerId)),{data:D}=h(()=>U("$active"));function b(c){return D.value?.locs.en.translations["Chain."+c]||c}const k=N(()=>{if(l.value){const c=l.value.model.inventory.resources;return Object.keys(c).map(y=>({info:y,amount:c[y],image:`/Board/Chains/${y}1.png`}))}else return});return(c,y)=>(s(),w(p(J),{title:"Inventory",noBodyPadding:"",badge:k.value?.length,badgeVariant:k.value?.length?"primary":void 0,"data-testid":"player-inventory-card"},{default:o(()=>[m(p(Q),null,{default:o(()=>[(s(!0),i(C,null,H(k.value,f=>(s(),w(p(F),{key:f.info,avatarUrl:f.image},{"bottom-left":o(()=>[r("div",null,"ID: "+u(f.info),1)]),default:o(()=>[r("div",null,u(b(f.info))+" x"+u(f.amount),1)],void 0,!0),_:2},1032,["avatarUrl"]))),128))],void 0,!0),_:1})],void 0,!0),_:1},8,["badge","badgeVariant"]))}}),le=R({__name:"HeroesAndInventoryCards",props:{playerId:{}},setup(T){return(g,l)=>(s(),i(C,null,[m(te,{class:"tw-mb-3",playerId:g.playerId},null,8,["playerId"]),m(ae,{playerId:g.playerId},null,8,["playerId"])],64))}});export{le as default};
